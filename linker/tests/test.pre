GLOBAL _START 
SECTION .TEXT 
_START : PUSH EAX 
PUSH DWORD INIT 
CALL READINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD POSITIVE 
CALL READINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD NEGATIVE 
CALL READINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD NEUTRAL 
CALL READINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD VECTOR 
CALL READINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD VECTOR + 4 
CALL READINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD VECTOR + 8 
CALL READINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD NEUTRAL 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
JMP INITIAL_LABEL 
MA_LABEL : PUSH EAX 
PUSH DWORD NEGATIVE 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
MOV EAX , [ NEGATIVE ] 
MOV EBX , [ TEN ] 
IMUL EAX , EBX 
MOV EBX , [ FIVE ] 
CDQ 
IDIV EBX 
MOV [ NEGATIVE ] , EAX 
PUSH EAX 
PUSH DWORD NEGATIVE 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
MOV EDX , [ NEGATIVE ] 
MOV [ VECTOR + 4 ] , EDX 
JMP FINAL_LABEL 
BOA_LABEL : PUSH EAX 
PUSH DWORD POSITIVE 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
MOV EAX , [ POSITIVE ] 
MOV EBX , [ TEN ] 
IMUL EAX , EBX 
MOV EBX , [ FIVE ] 
CDQ 
IDIV EBX 
MOV [ POSITIVE ] , EAX 
PUSH EAX 
PUSH DWORD POSITIVE 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
MOV EDX , [ POSITIVE ] 
MOV [ VECTOR + 4 ] , EDX 
JMP FINAL_LABEL 
NEUTRAL_LABEL : PUSH EAX 
PUSH DWORD NEUTRAL 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
MOV EAX , [ NEUTRAL ] 
MOV EBX , [ TEN ] 
IMUL EAX , EBX 
MOV EBX , [ FIVE ] 
CDQ 
IDIV EBX 
MOV [ NEUTRAL ] , EAX 
PUSH EAX 
PUSH DWORD NEUTRAL 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
MOV EDX , [ NEUTRAL ] 
MOV [ VECTOR + 4 ] , EDX 
JMP FINAL_LABEL 
INITIAL_LABEL : PUSH EAX 
PUSH DWORD INIT 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
MOV EAX , [ INIT ] 
CMP EAX , 0 
JG BOA_LABEL 
CMP EAX , 0 
JL MA_LABEL 
CMP EAX , 0 
JE NEUTRAL_LABEL 
FINAL_LABEL : PUSH EAX 
PUSH DWORD VECTOR 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD VECTOR + 4 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
PUSH EAX 
PUSH DWORD VECTOR + 8 
CALL WRITEINTEGERADDR 
POP EDX 
POP EAX 
MOV EAX , 1 
MOV EBX , 0 
INT 80H 
GLOBAL READCHAR 
READCHAR : ENTER 2 , 0 
MOV EAX , 3 
MOV EBX , 0 
MOV ECX , [ EBP + 8 ] 
MOV EDX , 1 
INT 80H 
MOV EAX , 3 
MOV EBX , 0 
MOV ECX , ESP 
MOV EDX , 1 
INT 80H 
LEAVE 
RET 
%DEFINE CHAR_ADDR DWORD [ EBP + 8 ] 
GLOBAL WRITECHAR 
WRITECHAR : ENTER 1 , 0 
MOV EAX , 4 
MOV EBX , 1 
MOV ECX , CHAR_ADDR 
MOV EDX , 1 
INT 80H 
WRITE_ENTERWC : MOV BYTE [ ESP ] , 0XA 
MOV EAX , 4 
MOV EBX , 1 
MOV ECX , ESP 
MOV EDX , 1 
INT 80H 
LEAVE 
RET 
GLOBAL READINTEGERADDR 
READINTEGERADDR : ENTER 12 , 0 
MOV ECX , 12 
ZEROING_LOOPRI : MOV BYTE [ ESP + ECX ] , 0 
LOOP ZEROING_LOOPRI 
MOV EDI , 0 
MOV EAX , 3 
MOV EBX , 0 
MOV ECX , ESP 
MOV EDX , 11 
INT 80H 
MOV [ ESP + 11 ] , EAX 
CHECK_LAST_NEW_LINERI : MOV ESI , ESP 
ADD ESI , [ ESP + 11 ] 
DEC ESI 
CMP BYTE [ ESI ] , 0XA 
JNE CHECK_MINUS_SYMBOLRI 
DEAL_NEW_LINERI : DEC BYTE [ ESP + 11 ] 
CHECK_MINUS_SYMBOLRI : CMP BYTE [ ESP ] , 0X2D 
JNE DEAL_POSITIVE_SIGNRI 
MOV EDI , 1 
DEAL_NEGATIVE_SIGNRI : MOV ECX , 1 
JMP DO_CONVERSIONRI 
DEAL_POSITIVE_SIGNRI : MOV ECX , 0 
JMP DO_CONVERSIONRI 
DO_CONVERSIONRI : MOV EAX , 0 
DO_CONVERSION_LOOPRI : CMP ECX , [ ESP + 11 ] 
JGE SHOULD_NEGRI 
MOV EDX , EAX 
SHL EAX , 3 
ADD EAX , EDX 
ADD EAX , EDX 
SUB EBX , EBX 
MOV BYTE BL , [ ESP + ECX ] 
SUB BYTE BL , 0X30 
ADD EAX , EBX 
INC ECX 
JMP DO_CONVERSION_LOOPRI 
SHOULD_NEGRI : CMP EDI , 1 
JNE END_CONVRI 
CONVERT_NEGRI : NOT EAX 
INC EAX 
END_CONVRI : MOV ESI , [ EBP + 8 ] 
MOV [ ESI ] , EAX 
MOV EAX , [ ESP + 11 ] 
BREAKRI : LEAVE 
RET 
GLOBAL WRITEINTEGERADDR 
WRITEINTEGERADDR : ENTER 12 , 0 
MOV ECX , 12 
ZEROING_LOOPWI : MOV BYTE [ ESP + ECX ] , 0 
LOOP ZEROING_LOOPWI 
MOV EDI , 0 
MOV ESI , [ EBP + 8 ] 
MOV ESI , [ ESI ] 
CHECK_NEGATIVEWI : CMP ESI , 0 
JL DEAL_NEGATIVEWI 
DEAL_POSITIVEWI : JMP MAIN_WRITEWI 
DEAL_NEGATIVEWI : MOV EDI , 1 
NOT ESI 
INC ESI 
MAIN_WRITEWI : SUB ECX , ECX 
CONVERT_LOOPWI : MOV EAX , ESI 
CDQ 
MOV EBX , 10 
IDIV EBX 
ADD BYTE DL , 0X30 
MOV BYTE [ ESP + ECX ] , DL 
MOV ESI , EAX 
INC ECX 
CMP ESI , 0 
JNE CONVERT_LOOPWI 
MOV [ ESP + 12 ] , ECX 
CHECK_MINUSWI : CMP EDI , 1 
JNE INVERT_OUTPUTWI 
MOV ECX , [ ESP + 12 ] 
MOV BYTE [ ESP + ECX ] , 0X2D 
INC BYTE [ ESP + 12 ] 
INVERT_OUTPUTWI : MOV ECX , [ ESP + 12 ] 
DEC ECX 
SUB EAX , EAX 
SUB EDX , EDX 
SUB EBX , EBX 
INVERT_LOOPWI : CMP ECX , 0 
JE END_AND_PRINTWI 
MOV BL , [ ESP + EAX ] 
MOV DL , [ ESP + ECX ] 
MOV [ ESP + EAX ] , DL 
MOV [ ESP + ECX ] , BL 
INC EAX 
DEC ECX 
CMP EAX , ECX 
JL INVERT_LOOPWI 
END_AND_PRINTWI : MOV EAX , 4 
MOV EBX , 1 
MOV ECX , ESP 
MOV EDX , 12 
INT 80H 
WRITE_ENTERWI : MOV BYTE [ ESP ] , 0XA 
MOV EAX , 4 
MOV EBX , 1 
MOV ECX , ESP 
MOV EDX , 1 
INT 80H 
BREAKWI : LEAVE 
RET 
GLOBAL READHEXA 
READHEXA : ENTER 11 , 0 
MOV ECX , 11 
ZEROING_LOOPRH : MOV BYTE [ ESP + ECX ] , 0 
LOOP ZEROING_LOOPRH 
MOV EAX , 3 
MOV EBX , 0 
MOV ECX , ESP 
MOV EDX , 10 
INT 80H 
MOV [ ESP + 11 ] , EAX 
CHECK_LAST_NEW_LINERH : MOV ESI , ESP 
ADD ESI , [ ESP + 11 ] 
DEC ESI 
CMP BYTE [ ESI ] , 0X0A 
JNE DO_CONVERSIONRH 
DEC BYTE [ ESP + 11 ] 
DO_CONVERSIONRH : SUB EAX , EAX 
MOV ECX , 0 
DO_CONVERSION_LOOPRH : CMP ECX , [ ESP + 11 ] 
JGE ENDRH 
SHL EAX , 4 
SUB EBX , EBX 
MOV BYTE BL , [ ESP + ECX ] 
CMP BL , 0X3A 
JL SUB_0X30 
CMP BL , 0X47 
JL SUB_0X37 
SUB_0X57 : SUB BL , 0X57 
JMP CONTINUERH 
SUB_0X37 : SUB BL , 0X37 
JMP CONTINUERH 
SUB_0X30 : SUB BL , 0X30 
CONTINUERH : ADD EAX , EBX 
INC ECX 
JMP DO_CONVERSION_LOOPRH 
ENDRH : MOV ESI , [ EBP + 8 ] 
MOV [ ESI ] , EAX 
MOV EAX , [ ESP + 11 ] 
LEAVE 
RET 
GLOBAL WRITEHEXA 
WRITEHEXA : ENTER 11 , 0 
MOV ECX , 11 
ZEROING_LOOPWH : MOV BYTE [ ESP + ECX ] , 0 
LOOP ZEROING_LOOPWH 
SUB ECX , ECX 
MOV ESI , [ EBP + 8 ] 
MOV EAX , [ ESI ] 
GETTING_ALGSWH : SUB EDX , EDX 
MOV EBX , 16 
DIV EBX 
CMP EDX , 10 
JB SUM0X30 
SUM0X41 : ADD EDX , 0X37 
JMP CONTINUEWH 
SUM0X30 : ADD EDX , 0X30 
CONTINUEWH : MOV [ ESP + ECX ] , EDX 
INC ECX 
CMP EAX , 0 
JG GETTING_ALGSWH 
END_OUTPUTWH : MOV BYTE [ ESP + ECX ] , 0X78 
INC ECX 
MOV BYTE [ ESP + ECX ] , 0X30 
INC ECX 
MOV [ ESP + 11 ] , ECX 
INVERT_OUTPUTWH : DEC ECX 
SUB EAX , EAX 
SUB EDX , EDX 
SUB EBX , EBX 
INVERT_LOOPWH : MOV BL , [ ESP + EAX ] 
MOV DL , [ ESP + ECX ] 
MOV [ ESP + EAX ] , DL 
MOV [ ESP + ECX ] , BL 
INC EAX 
DEC ECX 
CMP EAX , ECX 
JB INVERT_LOOPWH 
MOV EAX , 4 
MOV EBX , 1 
MOV ECX , ESP 
MOV EDX , 10 
INT 80H 
WRITE_ENTERWH : MOV BYTE [ ESP ] , 0XA 
MOV EAX , 4 
MOV EBX , 1 
MOV ECX , ESP 
MOV EDX , 1 
INT 80H 
LEAVE 
RET 
GLOBAL READSTRING 
READSTRING : ENTER 0 , 0 
MOV EAX , 3 
MOV EBX , 0 
MOV ECX , [ EBP + 12 ] 
MOV EDX , [ EBP + 8 ] 
INT 80H 
BREAKRS : LEAVE 
RET 
GLOBAL WRITESTRING 
WRITESTRING : ENTER 0 , 0 
MOV EAX , 4 
MOV EBX , 1 
MOV ECX , [ EBP + 12 ] 
MOV EDX , [ EBP + 8 ] 
INT 80H 
BREAKWS : LEAVE 
RET 
SECTION .DATA 
INIT : DD 0 
POSITIVE : DD 0 
NEGATIVE : DD 0 
NEUTRAL : DD 0 
VECTOR : DD 0 , 0 , 0 
TEN : DD 10 
FIVE : DD 5 
C : DD 0 
S : DD 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 
